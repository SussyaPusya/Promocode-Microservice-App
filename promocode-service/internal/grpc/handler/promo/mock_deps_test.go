// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go
//
// Generated by this command:
//
//	mockgen -source deps.go -package promo -typed -destination mock_deps_test.go
//

// Package promo is a generated GoMock package.
package promo

import (
	context "context"
	promo "gitlab.com/pisya-dev/promo-code-service/internal/domain/dto/promo"
	promo0 "gitlab.com/pisya-dev/promo-code-service/internal/domain/enum/promo"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockpromoService is a mock of promoService interface.
type MockpromoService struct {
	ctrl     *gomock.Controller
	recorder *MockpromoServiceMockRecorder
	isgomock struct{}
}

// MockpromoServiceMockRecorder is the mock recorder for MockpromoService.
type MockpromoServiceMockRecorder struct {
	mock *MockpromoService
}

// NewMockpromoService creates a new mock instance.
func NewMockpromoService(ctrl *gomock.Controller) *MockpromoService {
	mock := &MockpromoService{ctrl: ctrl}
	mock.recorder = &MockpromoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpromoService) EXPECT() *MockpromoServiceMockRecorder {
	return m.recorder
}

// Activate mocks base method.
func (m *MockpromoService) Activate(ctx context.Context, promoId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Activate", ctx, promoId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Activate indicates an expected call of Activate.
func (mr *MockpromoServiceMockRecorder) Activate(ctx, promoId any) *MockpromoServiceActivateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Activate", reflect.TypeOf((*MockpromoService)(nil).Activate), ctx, promoId)
	return &MockpromoServiceActivateCall{Call: call}
}

// MockpromoServiceActivateCall wrap *gomock.Call
type MockpromoServiceActivateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpromoServiceActivateCall) Return(code string, err error) *MockpromoServiceActivateCall {
	c.Call = c.Call.Return(code, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpromoServiceActivateCall) Do(f func(context.Context, string) (string, error)) *MockpromoServiceActivateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpromoServiceActivateCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockpromoServiceActivateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Count mocks base method.
func (m *MockpromoService) Count(ctx context.Context, companyId string, countries []string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, companyId, countries)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockpromoServiceMockRecorder) Count(ctx, companyId, countries any) *MockpromoServiceCountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockpromoService)(nil).Count), ctx, companyId, countries)
	return &MockpromoServiceCountCall{Call: call}
}

// MockpromoServiceCountCall wrap *gomock.Call
type MockpromoServiceCountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpromoServiceCountCall) Return(count int, err error) *MockpromoServiceCountCall {
	c.Call = c.Call.Return(count, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpromoServiceCountCall) Do(f func(context.Context, string, []string) (int, error)) *MockpromoServiceCountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpromoServiceCountCall) DoAndReturn(f func(context.Context, string, []string) (int, error)) *MockpromoServiceCountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockpromoService) Create(ctx context.Context, promoDto *promo.CreatePromoDTO) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, promoDto)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockpromoServiceMockRecorder) Create(ctx, promoDto any) *MockpromoServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockpromoService)(nil).Create), ctx, promoDto)
	return &MockpromoServiceCreateCall{Call: call}
}

// MockpromoServiceCreateCall wrap *gomock.Call
type MockpromoServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpromoServiceCreateCall) Return(id string, err error) *MockpromoServiceCreateCall {
	c.Call = c.Call.Return(id, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpromoServiceCreateCall) Do(f func(context.Context, *promo.CreatePromoDTO) (string, error)) *MockpromoServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpromoServiceCreateCall) DoAndReturn(f func(context.Context, *promo.CreatePromoDTO) (string, error)) *MockpromoServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockpromoService) Delete(ctx context.Context, promoId, companyId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, promoId, companyId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockpromoServiceMockRecorder) Delete(ctx, promoId, companyId any) *MockpromoServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockpromoService)(nil).Delete), ctx, promoId, companyId)
	return &MockpromoServiceDeleteCall{Call: call}
}

// MockpromoServiceDeleteCall wrap *gomock.Call
type MockpromoServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpromoServiceDeleteCall) Return(arg0 error) *MockpromoServiceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpromoServiceDeleteCall) Do(f func(context.Context, string, string) error) *MockpromoServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpromoServiceDeleteCall) DoAndReturn(f func(context.Context, string, string) error) *MockpromoServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetById mocks base method.
func (m *MockpromoService) GetById(ctx context.Context, promoId, companyId string) (*promo.DTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, promoId, companyId)
	ret0, _ := ret[0].(*promo.DTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockpromoServiceMockRecorder) GetById(ctx, promoId, companyId any) *MockpromoServiceGetByIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockpromoService)(nil).GetById), ctx, promoId, companyId)
	return &MockpromoServiceGetByIdCall{Call: call}
}

// MockpromoServiceGetByIdCall wrap *gomock.Call
type MockpromoServiceGetByIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpromoServiceGetByIdCall) Return(promoDTO *promo.DTO, err error) *MockpromoServiceGetByIdCall {
	c.Call = c.Call.Return(promoDTO, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpromoServiceGetByIdCall) Do(f func(context.Context, string, string) (*promo.DTO, error)) *MockpromoServiceGetByIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpromoServiceGetByIdCall) DoAndReturn(f func(context.Context, string, string) (*promo.DTO, error)) *MockpromoServiceGetByIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockpromoService) List(ctx context.Context, companyId string, countries []string, limit, offset int, sortBy promo0.SortBy) ([]promo.DTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, companyId, countries, limit, offset, sortBy)
	ret0, _ := ret[0].([]promo.DTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockpromoServiceMockRecorder) List(ctx, companyId, countries, limit, offset, sortBy any) *MockpromoServiceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockpromoService)(nil).List), ctx, companyId, countries, limit, offset, sortBy)
	return &MockpromoServiceListCall{Call: call}
}

// MockpromoServiceListCall wrap *gomock.Call
type MockpromoServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpromoServiceListCall) Return(promoDTOs []promo.DTO, err error) *MockpromoServiceListCall {
	c.Call = c.Call.Return(promoDTOs, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpromoServiceListCall) Do(f func(context.Context, string, []string, int, int, promo0.SortBy) ([]promo.DTO, error)) *MockpromoServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpromoServiceListCall) DoAndReturn(f func(context.Context, string, []string, int, int, promo0.SortBy) ([]promo.DTO, error)) *MockpromoServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockpromoService) Update(ctx context.Context, promoId, companyId, description, imageUrl string, targetAgeFrom, targetAgeUntil int64, targetCountry string, targetCategories []string, activeFrom, activeUntil time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, promoId, companyId, description, imageUrl, targetAgeFrom, targetAgeUntil, targetCountry, targetCategories, activeFrom, activeUntil)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockpromoServiceMockRecorder) Update(ctx, promoId, companyId, description, imageUrl, targetAgeFrom, targetAgeUntil, targetCountry, targetCategories, activeFrom, activeUntil any) *MockpromoServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockpromoService)(nil).Update), ctx, promoId, companyId, description, imageUrl, targetAgeFrom, targetAgeUntil, targetCountry, targetCategories, activeFrom, activeUntil)
	return &MockpromoServiceUpdateCall{Call: call}
}

// MockpromoServiceUpdateCall wrap *gomock.Call
type MockpromoServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpromoServiceUpdateCall) Return(arg0 error) *MockpromoServiceUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpromoServiceUpdateCall) Do(f func(context.Context, string, string, string, string, int64, int64, string, []string, time.Time, time.Time) error) *MockpromoServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpromoServiceUpdateCall) DoAndReturn(f func(context.Context, string, string, string, string, int64, int64, string, []string, time.Time, time.Time) error) *MockpromoServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
