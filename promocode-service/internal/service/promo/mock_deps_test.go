// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go
//
// Generated by this command:
//
//	mockgen -source deps.go -package promo -typed -destination mock_deps_test.go
//

// Package promo is a generated GoMock package.
package promo

import (
	context "context"
	promo "gitlab.com/pisya-dev/promo-code-service/internal/domain/enum/promo"
	model "gitlab.com/pisya-dev/promo-code-service/internal/storage/model"
	promo0 "gitlab.com/pisya-dev/promo-code-service/internal/storage/promo"
	reflect "reflect"
	time "time"

	redis "github.com/redis/go-redis/v9"
	gomock "go.uber.org/mock/gomock"
)

// MockpromoRepository is a mock of promoRepository interface.
type MockpromoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockpromoRepositoryMockRecorder
	isgomock struct{}
}

// MockpromoRepositoryMockRecorder is the mock recorder for MockpromoRepository.
type MockpromoRepositoryMockRecorder struct {
	mock *MockpromoRepository
}

// NewMockpromoRepository creates a new mock instance.
func NewMockpromoRepository(ctrl *gomock.Controller) *MockpromoRepository {
	mock := &MockpromoRepository{ctrl: ctrl}
	mock.recorder = &MockpromoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpromoRepository) EXPECT() *MockpromoRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockpromoRepository) Count(ctx context.Context, companyId string, countries []string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, companyId, countries)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockpromoRepositoryMockRecorder) Count(ctx, companyId, countries any) *MockpromoRepositoryCountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockpromoRepository)(nil).Count), ctx, companyId, countries)
	return &MockpromoRepositoryCountCall{Call: call}
}

// MockpromoRepositoryCountCall wrap *gomock.Call
type MockpromoRepositoryCountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpromoRepositoryCountCall) Return(count int, err error) *MockpromoRepositoryCountCall {
	c.Call = c.Call.Return(count, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpromoRepositoryCountCall) Do(f func(context.Context, string, []string) (int, error)) *MockpromoRepositoryCountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpromoRepositoryCountCall) DoAndReturn(f func(context.Context, string, []string) (int, error)) *MockpromoRepositoryCountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockpromoRepository) Create(ctx context.Context, promoModel *model.Promo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, promoModel)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockpromoRepositoryMockRecorder) Create(ctx, promoModel any) *MockpromoRepositoryCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockpromoRepository)(nil).Create), ctx, promoModel)
	return &MockpromoRepositoryCreateCall{Call: call}
}

// MockpromoRepositoryCreateCall wrap *gomock.Call
type MockpromoRepositoryCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpromoRepositoryCreateCall) Return(id string, err error) *MockpromoRepositoryCreateCall {
	c.Call = c.Call.Return(id, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpromoRepositoryCreateCall) Do(f func(context.Context, *model.Promo) (string, error)) *MockpromoRepositoryCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpromoRepositoryCreateCall) DoAndReturn(f func(context.Context, *model.Promo) (string, error)) *MockpromoRepositoryCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockpromoRepository) Delete(ctx context.Context, promoId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, promoId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockpromoRepositoryMockRecorder) Delete(ctx, promoId any) *MockpromoRepositoryDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockpromoRepository)(nil).Delete), ctx, promoId)
	return &MockpromoRepositoryDeleteCall{Call: call}
}

// MockpromoRepositoryDeleteCall wrap *gomock.Call
type MockpromoRepositoryDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpromoRepositoryDeleteCall) Return(arg0 error) *MockpromoRepositoryDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpromoRepositoryDeleteCall) Do(f func(context.Context, string) error) *MockpromoRepositoryDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpromoRepositoryDeleteCall) DoAndReturn(f func(context.Context, string) error) *MockpromoRepositoryDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetById mocks base method.
func (m *MockpromoRepository) GetById(ctx context.Context, promoId string) (*promo0.PromoDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, promoId)
	ret0, _ := ret[0].(*promo0.PromoDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockpromoRepositoryMockRecorder) GetById(ctx, promoId any) *MockpromoRepositoryGetByIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockpromoRepository)(nil).GetById), ctx, promoId)
	return &MockpromoRepositoryGetByIdCall{Call: call}
}

// MockpromoRepositoryGetByIdCall wrap *gomock.Call
type MockpromoRepositoryGetByIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpromoRepositoryGetByIdCall) Return(promoModel *promo0.PromoDetails, err error) *MockpromoRepositoryGetByIdCall {
	c.Call = c.Call.Return(promoModel, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpromoRepositoryGetByIdCall) Do(f func(context.Context, string) (*promo0.PromoDetails, error)) *MockpromoRepositoryGetByIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpromoRepositoryGetByIdCall) DoAndReturn(f func(context.Context, string) (*promo0.PromoDetails, error)) *MockpromoRepositoryGetByIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockpromoRepository) List(ctx context.Context, companyId string, countries []string, offset int, sortBy promo.SortBy, limit int) ([]promo0.PromoDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, companyId, countries, offset, sortBy, limit)
	ret0, _ := ret[0].([]promo0.PromoDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockpromoRepositoryMockRecorder) List(ctx, companyId, countries, offset, sortBy, limit any) *MockpromoRepositoryListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockpromoRepository)(nil).List), ctx, companyId, countries, offset, sortBy, limit)
	return &MockpromoRepositoryListCall{Call: call}
}

// MockpromoRepositoryListCall wrap *gomock.Call
type MockpromoRepositoryListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpromoRepositoryListCall) Return(promoModels []promo0.PromoDetails, err error) *MockpromoRepositoryListCall {
	c.Call = c.Call.Return(promoModels, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpromoRepositoryListCall) Do(f func(context.Context, string, []string, int, promo.SortBy, int) ([]promo0.PromoDetails, error)) *MockpromoRepositoryListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpromoRepositoryListCall) DoAndReturn(f func(context.Context, string, []string, int, promo.SortBy, int) ([]promo0.PromoDetails, error)) *MockpromoRepositoryListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockpromoRepository) Update(ctx context.Context, promoId, description, imageUrl string, targetAgeFrom, targetAgeUntil int64, targetCountry string, targetCategories []string, activeFrom, activeUntil time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, promoId, description, imageUrl, targetAgeFrom, targetAgeUntil, targetCountry, targetCategories, activeFrom, activeUntil)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockpromoRepositoryMockRecorder) Update(ctx, promoId, description, imageUrl, targetAgeFrom, targetAgeUntil, targetCountry, targetCategories, activeFrom, activeUntil any) *MockpromoRepositoryUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockpromoRepository)(nil).Update), ctx, promoId, description, imageUrl, targetAgeFrom, targetAgeUntil, targetCountry, targetCategories, activeFrom, activeUntil)
	return &MockpromoRepositoryUpdateCall{Call: call}
}

// MockpromoRepositoryUpdateCall wrap *gomock.Call
type MockpromoRepositoryUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpromoRepositoryUpdateCall) Return(arg0 error) *MockpromoRepositoryUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpromoRepositoryUpdateCall) Do(f func(context.Context, string, string, string, int64, int64, string, []string, time.Time, time.Time) error) *MockpromoRepositoryUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpromoRepositoryUpdateCall) DoAndReturn(f func(context.Context, string, string, string, int64, int64, string, []string, time.Time, time.Time) error) *MockpromoRepositoryUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockpromoCodeRepository is a mock of promoCodeRepository interface.
type MockpromoCodeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockpromoCodeRepositoryMockRecorder
	isgomock struct{}
}

// MockpromoCodeRepositoryMockRecorder is the mock recorder for MockpromoCodeRepository.
type MockpromoCodeRepositoryMockRecorder struct {
	mock *MockpromoCodeRepository
}

// NewMockpromoCodeRepository creates a new mock instance.
func NewMockpromoCodeRepository(ctrl *gomock.Controller) *MockpromoCodeRepository {
	mock := &MockpromoCodeRepository{ctrl: ctrl}
	mock.recorder = &MockpromoCodeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpromoCodeRepository) EXPECT() *MockpromoCodeRepositoryMockRecorder {
	return m.recorder
}

// Activate mocks base method.
func (m *MockpromoCodeRepository) Activate(ctx context.Context, promoId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Activate", ctx, promoId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Activate indicates an expected call of Activate.
func (mr *MockpromoCodeRepositoryMockRecorder) Activate(ctx, promoId any) *MockpromoCodeRepositoryActivateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Activate", reflect.TypeOf((*MockpromoCodeRepository)(nil).Activate), ctx, promoId)
	return &MockpromoCodeRepositoryActivateCall{Call: call}
}

// MockpromoCodeRepositoryActivateCall wrap *gomock.Call
type MockpromoCodeRepositoryActivateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpromoCodeRepositoryActivateCall) Return(code string, err error) *MockpromoCodeRepositoryActivateCall {
	c.Call = c.Call.Return(code, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpromoCodeRepositoryActivateCall) Do(f func(context.Context, string) (string, error)) *MockpromoCodeRepositoryActivateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpromoCodeRepositoryActivateCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockpromoCodeRepositoryActivateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockpromoCodeRepository) Create(ctx context.Context, promoCodeModel *model.PromoCode) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, promoCodeModel)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockpromoCodeRepositoryMockRecorder) Create(ctx, promoCodeModel any) *MockpromoCodeRepositoryCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockpromoCodeRepository)(nil).Create), ctx, promoCodeModel)
	return &MockpromoCodeRepositoryCreateCall{Call: call}
}

// MockpromoCodeRepositoryCreateCall wrap *gomock.Call
type MockpromoCodeRepositoryCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpromoCodeRepositoryCreateCall) Return(id string, err error) *MockpromoCodeRepositoryCreateCall {
	c.Call = c.Call.Return(id, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpromoCodeRepositoryCreateCall) Do(f func(context.Context, *model.PromoCode) (string, error)) *MockpromoCodeRepositoryCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpromoCodeRepositoryCreateCall) DoAndReturn(f func(context.Context, *model.PromoCode) (string, error)) *MockpromoCodeRepositoryCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockaccountServiceClient is a mock of accountServiceClient interface.
type MockaccountServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockaccountServiceClientMockRecorder
	isgomock struct{}
}

// MockaccountServiceClientMockRecorder is the mock recorder for MockaccountServiceClient.
type MockaccountServiceClientMockRecorder struct {
	mock *MockaccountServiceClient
}

// NewMockaccountServiceClient creates a new mock instance.
func NewMockaccountServiceClient(ctrl *gomock.Controller) *MockaccountServiceClient {
	mock := &MockaccountServiceClient{ctrl: ctrl}
	mock.recorder = &MockaccountServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockaccountServiceClient) EXPECT() *MockaccountServiceClientMockRecorder {
	return m.recorder
}

// GetCompanyNameByCompanyID mocks base method.
func (m *MockaccountServiceClient) GetCompanyNameByCompanyID(ctx context.Context, companyID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyNameByCompanyID", ctx, companyID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyNameByCompanyID indicates an expected call of GetCompanyNameByCompanyID.
func (mr *MockaccountServiceClientMockRecorder) GetCompanyNameByCompanyID(ctx, companyID any) *MockaccountServiceClientGetCompanyNameByCompanyIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyNameByCompanyID", reflect.TypeOf((*MockaccountServiceClient)(nil).GetCompanyNameByCompanyID), ctx, companyID)
	return &MockaccountServiceClientGetCompanyNameByCompanyIDCall{Call: call}
}

// MockaccountServiceClientGetCompanyNameByCompanyIDCall wrap *gomock.Call
type MockaccountServiceClientGetCompanyNameByCompanyIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockaccountServiceClientGetCompanyNameByCompanyIDCall) Return(companyName string, err error) *MockaccountServiceClientGetCompanyNameByCompanyIDCall {
	c.Call = c.Call.Return(companyName, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockaccountServiceClientGetCompanyNameByCompanyIDCall) Do(f func(context.Context, string) (string, error)) *MockaccountServiceClientGetCompanyNameByCompanyIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockaccountServiceClientGetCompanyNameByCompanyIDCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockaccountServiceClientGetCompanyNameByCompanyIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockpromoLikeRepository is a mock of promoLikeRepository interface.
type MockpromoLikeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockpromoLikeRepositoryMockRecorder
	isgomock struct{}
}

// MockpromoLikeRepositoryMockRecorder is the mock recorder for MockpromoLikeRepository.
type MockpromoLikeRepositoryMockRecorder struct {
	mock *MockpromoLikeRepository
}

// NewMockpromoLikeRepository creates a new mock instance.
func NewMockpromoLikeRepository(ctrl *gomock.Controller) *MockpromoLikeRepository {
	mock := &MockpromoLikeRepository{ctrl: ctrl}
	mock.recorder = &MockpromoLikeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpromoLikeRepository) EXPECT() *MockpromoLikeRepositoryMockRecorder {
	return m.recorder
}

// GetCountByPromoId mocks base method.
func (m *MockpromoLikeRepository) GetCountByPromoId(ctx context.Context, promoId string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountByPromoId", ctx, promoId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountByPromoId indicates an expected call of GetCountByPromoId.
func (mr *MockpromoLikeRepositoryMockRecorder) GetCountByPromoId(ctx, promoId any) *MockpromoLikeRepositoryGetCountByPromoIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountByPromoId", reflect.TypeOf((*MockpromoLikeRepository)(nil).GetCountByPromoId), ctx, promoId)
	return &MockpromoLikeRepositoryGetCountByPromoIdCall{Call: call}
}

// MockpromoLikeRepositoryGetCountByPromoIdCall wrap *gomock.Call
type MockpromoLikeRepositoryGetCountByPromoIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpromoLikeRepositoryGetCountByPromoIdCall) Return(count int, err error) *MockpromoLikeRepositoryGetCountByPromoIdCall {
	c.Call = c.Call.Return(count, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpromoLikeRepositoryGetCountByPromoIdCall) Do(f func(context.Context, string) (int, error)) *MockpromoLikeRepositoryGetCountByPromoIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpromoLikeRepositoryGetCountByPromoIdCall) DoAndReturn(f func(context.Context, string) (int, error)) *MockpromoLikeRepositoryGetCountByPromoIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockpromoActivationRepository is a mock of promoActivationRepository interface.
type MockpromoActivationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockpromoActivationRepositoryMockRecorder
	isgomock struct{}
}

// MockpromoActivationRepositoryMockRecorder is the mock recorder for MockpromoActivationRepository.
type MockpromoActivationRepositoryMockRecorder struct {
	mock *MockpromoActivationRepository
}

// NewMockpromoActivationRepository creates a new mock instance.
func NewMockpromoActivationRepository(ctrl *gomock.Controller) *MockpromoActivationRepository {
	mock := &MockpromoActivationRepository{ctrl: ctrl}
	mock.recorder = &MockpromoActivationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpromoActivationRepository) EXPECT() *MockpromoActivationRepositoryMockRecorder {
	return m.recorder
}

// GetCountByPromoId mocks base method.
func (m *MockpromoActivationRepository) GetCountByPromoId(ctx context.Context, promoId string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountByPromoId", ctx, promoId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountByPromoId indicates an expected call of GetCountByPromoId.
func (mr *MockpromoActivationRepositoryMockRecorder) GetCountByPromoId(ctx, promoId any) *MockpromoActivationRepositoryGetCountByPromoIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountByPromoId", reflect.TypeOf((*MockpromoActivationRepository)(nil).GetCountByPromoId), ctx, promoId)
	return &MockpromoActivationRepositoryGetCountByPromoIdCall{Call: call}
}

// MockpromoActivationRepositoryGetCountByPromoIdCall wrap *gomock.Call
type MockpromoActivationRepositoryGetCountByPromoIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpromoActivationRepositoryGetCountByPromoIdCall) Return(count int, err error) *MockpromoActivationRepositoryGetCountByPromoIdCall {
	c.Call = c.Call.Return(count, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpromoActivationRepositoryGetCountByPromoIdCall) Do(f func(context.Context, string) (int, error)) *MockpromoActivationRepositoryGetCountByPromoIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpromoActivationRepositoryGetCountByPromoIdCall) DoAndReturn(f func(context.Context, string) (int, error)) *MockpromoActivationRepositoryGetCountByPromoIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockredisDb is a mock of redisDb interface.
type MockredisDb struct {
	ctrl     *gomock.Controller
	recorder *MockredisDbMockRecorder
	isgomock struct{}
}

// MockredisDbMockRecorder is the mock recorder for MockredisDb.
type MockredisDbMockRecorder struct {
	mock *MockredisDb
}

// NewMockredisDb creates a new mock instance.
func NewMockredisDb(ctrl *gomock.Controller) *MockredisDb {
	mock := &MockredisDb{ctrl: ctrl}
	mock.recorder = &MockredisDbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockredisDb) EXPECT() *MockredisDbMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockredisDb) Del(ctx context.Context, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Del", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockredisDbMockRecorder) Del(ctx any, keys ...any) *MockredisDbDelCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockredisDb)(nil).Del), varargs...)
	return &MockredisDbDelCall{Call: call}
}

// MockredisDbDelCall wrap *gomock.Call
type MockredisDbDelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockredisDbDelCall) Return(arg0 *redis.IntCmd) *MockredisDbDelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockredisDbDelCall) Do(f func(context.Context, ...string) *redis.IntCmd) *MockredisDbDelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockredisDbDelCall) DoAndReturn(f func(context.Context, ...string) *redis.IntCmd) *MockredisDbDelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockredisDb) Get(ctx context.Context, key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockredisDbMockRecorder) Get(ctx, key any) *MockredisDbGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockredisDb)(nil).Get), ctx, key)
	return &MockredisDbGetCall{Call: call}
}

// MockredisDbGetCall wrap *gomock.Call
type MockredisDbGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockredisDbGetCall) Return(arg0 *redis.StringCmd) *MockredisDbGetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockredisDbGetCall) Do(f func(context.Context, string) *redis.StringCmd) *MockredisDbGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockredisDbGetCall) DoAndReturn(f func(context.Context, string) *redis.StringCmd) *MockredisDbGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Set mocks base method.
func (m *MockredisDb) Set(ctx context.Context, key string, value any, expiration time.Duration) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiration)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockredisDbMockRecorder) Set(ctx, key, value, expiration any) *MockredisDbSetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockredisDb)(nil).Set), ctx, key, value, expiration)
	return &MockredisDbSetCall{Call: call}
}

// MockredisDbSetCall wrap *gomock.Call
type MockredisDbSetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockredisDbSetCall) Return(arg0 *redis.StatusCmd) *MockredisDbSetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockredisDbSetCall) Do(f func(context.Context, string, any, time.Duration) *redis.StatusCmd) *MockredisDbSetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockredisDbSetCall) DoAndReturn(f func(context.Context, string, any, time.Duration) *redis.StatusCmd) *MockredisDbSetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
