// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/protos/account.proto

package account_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Account_Service_Ping_FullMethodName           = "/api.Account_Service/Ping"
	Account_Service_GetUserProfile_FullMethodName = "/api.Account_Service/GetUserProfile"
	Account_Service_CreateUser_FullMethodName     = "/api.Account_Service/CreateUser"
	Account_Service_UpdateUser_FullMethodName     = "/api.Account_Service/UpdateUser"
	Account_Service_DeleteUser_FullMethodName     = "/api.Account_Service/DeleteUser"
	Account_Service_CreateBuisness_FullMethodName = "/api.Account_Service/CreateBuisness"
	Account_Service_GetBuisness_FullMethodName    = "/api.Account_Service/GetBuisness"
)

// Account_ServiceClient is the client API for Account_Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Account_ServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	CreateBuisness(ctx context.Context, in *CreateBuisnessRequest, opts ...grpc.CallOption) (*CreateBuisnessResponse, error)
	GetBuisness(ctx context.Context, in *GetBuisnessRequest, opts ...grpc.CallOption) (*GetBuisnessResponse, error)
}

type account_ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccount_ServiceClient(cc grpc.ClientConnInterface) Account_ServiceClient {
	return &account_ServiceClient{cc}
}

func (c *account_ServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, Account_Service_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *account_ServiceClient) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserProfileResponse)
	err := c.cc.Invoke(ctx, Account_Service_GetUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *account_ServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, Account_Service_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *account_ServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, Account_Service_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *account_ServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, Account_Service_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *account_ServiceClient) CreateBuisness(ctx context.Context, in *CreateBuisnessRequest, opts ...grpc.CallOption) (*CreateBuisnessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBuisnessResponse)
	err := c.cc.Invoke(ctx, Account_Service_CreateBuisness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *account_ServiceClient) GetBuisness(ctx context.Context, in *GetBuisnessRequest, opts ...grpc.CallOption) (*GetBuisnessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBuisnessResponse)
	err := c.cc.Invoke(ctx, Account_Service_GetBuisness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Account_ServiceServer is the server API for Account_Service service.
// All implementations must embed UnimplementedAccount_ServiceServer
// for forward compatibility.
type Account_ServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	CreateBuisness(context.Context, *CreateBuisnessRequest) (*CreateBuisnessResponse, error)
	GetBuisness(context.Context, *GetBuisnessRequest) (*GetBuisnessResponse, error)
	mustEmbedUnimplementedAccount_ServiceServer()
}

// UnimplementedAccount_ServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccount_ServiceServer struct{}

func (UnimplementedAccount_ServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedAccount_ServiceServer) GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedAccount_ServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAccount_ServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedAccount_ServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAccount_ServiceServer) CreateBuisness(context.Context, *CreateBuisnessRequest) (*CreateBuisnessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBuisness not implemented")
}
func (UnimplementedAccount_ServiceServer) GetBuisness(context.Context, *GetBuisnessRequest) (*GetBuisnessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuisness not implemented")
}
func (UnimplementedAccount_ServiceServer) mustEmbedUnimplementedAccount_ServiceServer() {}
func (UnimplementedAccount_ServiceServer) testEmbeddedByValue()                         {}

// UnsafeAccount_ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Account_ServiceServer will
// result in compilation errors.
type UnsafeAccount_ServiceServer interface {
	mustEmbedUnimplementedAccount_ServiceServer()
}

func RegisterAccount_ServiceServer(s grpc.ServiceRegistrar, srv Account_ServiceServer) {
	// If the following call pancis, it indicates UnimplementedAccount_ServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Account_Service_ServiceDesc, srv)
}

func _Account_Service_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Account_ServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_Service_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Account_ServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_Service_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Account_ServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_Service_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Account_ServiceServer).GetUserProfile(ctx, req.(*GetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_Service_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Account_ServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_Service_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Account_ServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_Service_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Account_ServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_Service_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Account_ServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_Service_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Account_ServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_Service_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Account_ServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_Service_CreateBuisness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBuisnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Account_ServiceServer).CreateBuisness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_Service_CreateBuisness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Account_ServiceServer).CreateBuisness(ctx, req.(*CreateBuisnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_Service_GetBuisness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuisnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Account_ServiceServer).GetBuisness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_Service_GetBuisness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Account_ServiceServer).GetBuisness(ctx, req.(*GetBuisnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Account_Service_ServiceDesc is the grpc.ServiceDesc for Account_Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Account_Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Account_Service",
	HandlerType: (*Account_ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Account_Service_Ping_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _Account_Service_GetUserProfile_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Account_Service_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Account_Service_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Account_Service_DeleteUser_Handler,
		},
		{
			MethodName: "CreateBuisness",
			Handler:    _Account_Service_CreateBuisness_Handler,
		},
		{
			MethodName: "GetBuisness",
			Handler:    _Account_Service_GetBuisness_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protos/account.proto",
}
